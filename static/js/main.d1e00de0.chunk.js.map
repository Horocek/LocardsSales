{"version":3,"sources":["4.png","utils/Api.js","utils/Tools.js","utils/table.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fetchData","login","pass","card","a","loginUser","autorized","getCrmToken","crmToken","getCard","cardInfo","getSales","id","sales","getTemplates","templates","user","email","password","fetch","method","headers","body","JSON","stringify","response","json","result","success","data","JWT","token","CRM","cardId","length","changeTemplate","templateId","bodyJSON","commentOnOperation","chargeBonus","count","cardNumber","countBonuses","writeOffBonus","sale","amount","writeOffBonuses","bonusesWriteOff","otherDiscountsAmount","timeConverter","unixTime","date","Date","getDate","getMonth","getFullYear","parsSales","map","item","write","charge","bonusesCharge","createdAt","isCanceled","templateChange","array","bonusCharge","bonusWriteOff","saleOperation","rowClass","row","rowIdx","Table","this","props","trClassName","isKey","dataField","dataAlign","headerAlign","width","thStyle","backgroundColor","Component","getInfo","divStyle","height","background","border","transform","saleStyle","inputStyle","btStyle","tableStyle","pStyle","InputCreds","state","template","name","templateChanged","writeSaleBonus","handleChange","bind","event","target","value","setState","filter","isActive","templateName","style","className","Align","lastName","firstName","birthday","phone","balance","cashback","discount","type","onChange","onClick","buttonBonusCharge","alert","buttonGetSales","buttonBonusWriteOff","buttonSale","createSelectItems","buttonTemplate","inputForm","cardInfoDraw","salesDraw","saleForm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","href","src","logo","alt","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d1e00de0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/4.8ebb4332.png\";","const fetchData = async (login, pass, card) => {\n    const autorized =  await loginUser(login, pass);\n    if (!autorized) return [false, \"НЕ ВЕРНЫЙ ЛОГИН/ПАРОЛЬ\"];\n    const crmToken = await getCrmToken(autorized)\n    const cardInfo = await getCard(crmToken, card)\n    if (!cardInfo) return [false, \"КАРТА НЕ НАЙДЕНА\"];\n    const sales = await getSales(cardInfo.id, autorized);\n    const templates = await getTemplates(autorized);\n    //if (!sales && cardInfo) return [true, cardInfo];\n    if (!sales) return [false,\"НЕТ ПРОДАЖ\"];\n    return [cardInfo, sales, templates, autorized, crmToken];\n};\n\nconst loginUser = async (login, pass) => {\n    const user = {\n        email: login,\n        password: pass\n    };\n    const response = await fetch('https://api.lo.cards/v1/user/login', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify(user)\n      });\n      const result =  await response.json();\n      return !result.success ? result.success : result.data;\n}\n\n\nconst getCrmToken = async (JWT) => {\n\n    const response = await fetch('https://api.lo.cards/v1/integration', {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${JWT}`,\n            'Content-Type': 'application/json;charset=utf-8'\n        }\n      });\n      const result =  await response.json();\n      return result.data[0].token;\n}\n\nconst getCard = async (CRM, card) => {\n\n    const response = await fetch(`https://api.lo.cards/v1/crm/card/${card}`, {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${CRM}`,\n            'Content-Type': 'application/json;charset=utf-8'\n        }\n      });\n      const result =  await response.json();\n      return !result.success ? result.success : result.data;\n}\n\nconst getSales = async (cardId, JWT) => {\n\n    const response = await fetch(`https://api.lo.cards/v1/analytics/sale-for-card/${cardId}`, {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${JWT}`,\n            'Content-Type': 'application/json;charset=utf-8'\n        }\n      });\n      const result =  await response.json();\n      return result.data.length === 0 ? false : result.data;\n}\n\nconst getTemplates = async (JWT) => {\n\n    const response = await fetch(`https://api.lo.cards/v1/template`, {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${JWT}`,\n            'Content-Type': 'application/json;charset=utf-8'\n        }\n      });\n      const result =  await response.json();\n      return result.data.length === 0 ? false : result.data;\n}\n\nconst changeTemplate = async (JWT, cardId, templateId) => {\n    const bodyJSON = {\n        cardId: cardId,\n        templateId: templateId,\n        commentOnOperation: \"\"\n    };\n    const response = await fetch('https://api.lo.cards/v1/card/change-template', {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${JWT}`,\n            'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify(bodyJSON)\n      });\n      const result =  await response.json();\n      return !result.success ? result.success : result;\n}\n\nconst chargeBonus = async (JWT, count, cardNumber) => {\n    const bodyJSON = {\n        countBonuses: count,\n        cardNumber: cardNumber,\n        commentOnOperation: \"Начисление технической поддрежки\"\n      }\n    const response = await fetch('https://api.lo.cards/v1/operation/bonuses-charge', {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${JWT}`,\n            'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify(bodyJSON)\n      });\n      const result =  await response.json();\n      return !result.success ? result.success : result;\n}\nconst writeOffBonus = async (JWT, count, cardNumber) => {\n    const bodyJSON = {\n        countBonuses: count,\n        cardNumber: cardNumber,\n        commentOnOperation: \"Списание технической поддрежки\"\n      }\n    const response = await fetch('https://api.lo.cards/v1/operation/bonuses-write-off', {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${JWT}`,\n            'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify(bodyJSON)\n      });\n      const result =  await response.json();\n      return !result.success ? result.success : result;\n}\nconst sale = async (CRM, amount, cardNumber, writeOffBonuses = 0) => {\n    const bodyJSON = {\n        amount: amount,\n        bonusesWriteOff: writeOffBonuses,\n        otherDiscountsAmount: 0,\n        cardNumber: cardNumber\n      }\n    const response = await fetch('https://api.lo.cards/v1/crm/sale', {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${CRM}`,\n            'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify(bodyJSON)\n      });\n      const result =  await response.json();\n      return !result.success ? result.success : result;\n}\n\n\nexport {\n    fetchData,\n    changeTemplate,\n    chargeBonus,\n    writeOffBonus,\n    sale\n};","import {\n  changeTemplate, \n  chargeBonus,\n  writeOffBonus,\n  sale\n} from './Api'\n\nconst timeConverter = unixTime => {\n  const months = ['01', '02', '03',\n      '04', '05', '06',\n      '07', '08', '09',\n      '10', '11', '12'\n  ];\n  const date = new Date(unixTime * 1000);\n  return `${date.getDate()}-${months[date.getMonth()]}-${date.getFullYear()}`;\n}\n\nconst salesPars = array => {\n  return array.map((item) => {\n      return {\n          amount: item.amount,\n          write: item.bonusesWriteOff,\n          charge: item.bonusesCharge,\n          date: timeConverter(item.createdAt),\n          isCanceled: item.isCanceled ? \"отменена\" : \"проведена\"\n      } \n  });\n}\n\nconst parsSales = (data) => {\n  if (!data[0]) return data;\ndata[1] = salesPars(data[1]);\nreturn data;\n}\n\nconst parsTemplate = (array) =>{\n  const activeTemplate = array.filter(item => item.isActive);\n  const result = activeTemplate.map(item => { \n      return {\n        id : item.id, \n        name : item.templateName\n      }\n    });\n  return result;\n}\n\nconst templateChange = async (JWT, cardId, templateId) => {\n  const array = await changeTemplate (JWT, cardId, templateId);\n  return array;\n}\nconst bonusCharge = async (JWT, count, cardNumber) => {\n  const array = await chargeBonus (JWT, count, cardNumber);\n  return array;\n}\nconst bonusWriteOff = async (JWT, count, cardNumber) => {\n  const array = await writeOffBonus (JWT, count, cardNumber);\n  return array;\n}\n\nconst saleOperation = async (CRM, amount, cardNumber, writeOffBonuses = 0) => {\n  const array = await sale (CRM, amount, cardNumber, writeOffBonuses);\n  return array;\n}\nexport {parsSales, parsTemplate, templateChange, bonusCharge, bonusWriteOff, saleOperation};","import React, { Component } from 'react';\nimport {BootstrapTable, \n       TableHeaderColumn} from 'react-bootstrap-table';\nimport '../../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\nimport '../../node_modules/react-bootstrap-table/css/react-bootstrap-table.css';\nimport '../../src/Table.css';\n \n \nfunction rowClass(row, rowIdx) {\n  return row['isCanceled'] === 'отменена' ? \n    'CancelRow' : 'Other-Row';\n}\nclass Table extends Component {\n  render() {\n    return (\n      <div>\n        <BootstrapTable data={this.props.data}\n        trClassName={rowClass}>\n        <TableHeaderColumn isKey\n                             dataField='date'\n                             dataAlign='center'\n                             headerAlign=\"center\"\n                             width=\"120\"\n                             thStyle={\n                                 {backgroundColor: '#31d3fa'}}>\n            Дата\n          </TableHeaderColumn>\n          <TableHeaderColumn dataField='amount'\n                             dataAlign='center'\n                             headerAlign=\"center\"\n                             width=\"100\"\n                             thStyle={\n                                {backgroundColor: '#31d3fa'}}>\n            Сумма<br></br>\n            чека\n          </TableHeaderColumn>\n          <TableHeaderColumn dataField='write'\n                             dataAlign='center'\n                             width=\"100\"\n                             headerAlign=\"center\"\n                             thStyle={\n                                {backgroundColor: '#31d3fa'}}>\n            Оплачено <br></br>\n            бонусами\n          </TableHeaderColumn>\n          <TableHeaderColumn dataField='charge'\n                             dataAlign='center'\n                             width=\"120\"\n                             headerAlign=\"center\"\n                             thStyle={\n                                {backgroundColor: '#31d3fa'}}>\n            Накопленно <br></br>\n            бонусов\n          </TableHeaderColumn>\n          <TableHeaderColumn dataField='isCanceled'\n                             dataAlign='center'\n                             width=\"100\"\n                             headerAlign=\"center\"\n                             thStyle={\n                                {backgroundColor: '#31d3fa'}}>\n            Статус <br></br>\n            операции\n          </TableHeaderColumn>\n        </BootstrapTable>\n      </div>\n    );\n  }\n}\n \nexport default Table;","import React, { Component } from \"react\";\nimport './App.css';\nimport {fetchData} from './utils/Api'\nimport {parsSales, parsTemplate, templateChange, bonusCharge, bonusWriteOff, saleOperation} from './utils/Tools'\nimport Table from './utils/table'\n\n\nconst getInfo = async (login, pass, card) =>  await parsSales(await fetchData(login, pass, card));\nconst cardIndex = 0;\nconst salesIndex = 1;\nconst templateIndex = 2;\nconst JWTIndex = 3;\nconst CRMIndex = 4;\n\nconst divStyle = {\n    width: 360,\n    height: 200,\n    background: \"#31d3fa\",\n    border: \"solid\", \n    \"margin-left\": \"3%\",\n    \"border-radius\": \"11px 11px 11px 11px\",\n    transform: \"skew(0deg)\"\n  };\n  const saleStyle = {\n    width: 500,\n    height: 200,\n    background: \"#31d3fa\",\n    border: \"solid\", \n    \"margin-left\": \"1%\",\n    \"margin-top\": \"3%\",\n    \"border-radius\": \"11px 11px 11px 11px\",\n    transform: \"skew(0deg)\"\n  };\n  \n  const inputStyle = {\n    \"margin-top\": \"2%\",\n    \"margin-left\": \"2%\",\n    width: 150,\n    height: 40,\n    \"border-radius\": \"5px 5px 5px 5px\",\n    transform: \"skew(0deg)\"\n  };\n \nconst btStyle ={\n    \"border-radius\": \"11px 11px 11px 11px\",\n    transform: \"skew(0deg)\",\n    width : 200,\n    height : 30,\n    \"margin-top\" : \"1%\",\n    \"margin-left\" : \"3%\",\n    \"margin-right\" : \"1%\",\n  }\n  const tableStyle = { \n    width: 550,\n    background: \"#e8f0fe\",\n    border: \"solid\", \n    \"margin-left\": \"1%\",\n    \"border-radius\": \"15px 15px 15px 16px\",\n    \"background-color\": \"#cccccc\",\n    transform: \"skew(0deg)\"\n  };\n  const pStyle = { \n    background: \"#e8f0fe\",\n    \"margin-left\": \"35%\",\n    \"border-radius\": \"15px 15px 15px 16px\",\n    \"background-color\": \"#cccccc\",\n    transform: \"skew(0deg)\"\n  };\n \nclass InputCreds extends Component \n{\n    constructor(){\n        super();\n        this.state = {\n            login: 'Login',\n            pass: 'Pass',\n            card: 'card number',\n            cardInfo : [false,[]],\n            template : [{id: 0,\n                        name : \"name\"}],\n            templateChanged : [],\n            bonusCharge : 0,\n            bonusWriteOff : 0,\n            amount : 0,\n            writeSaleBonus : 0\n        };\n        this.handleChange = this.handleChange.bind(this);\n  \n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name]: value\n        });\n    }\n\n\n    async buttonGetSales() {\n        this.setState({cardInfo : await getInfo(this.state.login, this.state.pass, this.state.card)});\n        if (this.state.cardInfo[0] === false) return\n        this.setState({template : await parsTemplate(this.state.cardInfo[templateIndex])});\n        this.setState({templateChanged : this.state.cardInfo[cardIndex].templateId})\n    }\n    async buttonTemplate(){\n       const result = await templateChange(this.state.cardInfo[JWTIndex], this.state.cardInfo[cardIndex].id, this.state.templateChanged);\n       return result;\n    }\n    async buttonBonusCharge(){\n        const result = await bonusCharge(this.state.cardInfo[JWTIndex], this.state.bonusCharge, this.state.cardInfo[cardIndex].cardNumber);\n        return result;\n     }\n     async buttonBonusWriteOff(){\n        const result = await bonusWriteOff(this.state.cardInfo[JWTIndex], this.state.bonusWriteOff, this.state.cardInfo[cardIndex].cardNumber);\n        return result;\n     }\n\n     async buttonSale(){\n        const result = await saleOperation(this.state.cardInfo[CRMIndex], this.state.amount, this.state.cardInfo[cardIndex].cardNumber, this.state.writeSaleBonus);\n        return result;\n     }\n\n    createSelectItems() {  \n        return this.state.template.map((item) => {\n           return <option value={item.id}>{item.name}</option>\n        })\n\n    }  \n    salesDraw(props){\n     \n        if (this.state.cardInfo[0] === false) return(<div>{this.state.cardInfo[1]}</div>);\n        const array = this.state.cardInfo[salesIndex];\n         return(\n            <div style = {tableStyle}>\n                <p style = {pStyle} className=\"Table-header\" Align=\"center\" >Движение бонусов</p>\n                <Table data={array}/>\n            </div> \n        )\n    }\n    cardInfoDraw(props){\n        const card = this.state.cardInfo[cardIndex];\n        if (this.state.cardInfo[0] === false) return(<div></div>);\n        return(\n            <div style={divStyle}><br></br>\n                &nbsp; &nbsp;Владелец карты : {card.lastName} {card.firstName}<br></br>\n                &nbsp; &nbsp;День рождения : {card.birthday}<br></br>\n                &nbsp; &nbsp;Телефон : {card.phone}<br></br>\n                &nbsp; &nbsp;Шаблон : {card.templateName}<br></br>\n                &nbsp; &nbsp;Баланс : {card.balance}<br></br>\n                &nbsp; &nbsp;Кэшбек : {card.cashback}% <br></br>\n                &nbsp; &nbsp;Скидка : {card.discount}%<br></br>\n            </div>\n        )\n        \n    }\n    \n\n    inputForm(){\n        return(\n        <div style={divStyle}>\n            <label><br></br>\n             &nbsp; &nbsp;Логин:\n                <input type=\"text\" name=\"login\" onChange={this.handleChange}/><br></br><br></br>\n                &nbsp; &nbsp;Пароль:\n                <input type=\"password\" name='pass' onChange={this.handleChange} /><br></br><br></br>\n                &nbsp; &nbsp;Номер карты:\n                <input type=\"number\" name='card' onChange={this.handleChange} /><br></br><br></br>\n            </label>\n        </div>\n        )   \n    }\n    saleForm(props){\n        const card = this.state.cardInfo[cardIndex];\n        if (this.state.cardInfo[0] === false) return(<div></div>);\n        if (card.discount === 0 && card.cashback > 0) {\n        return(\n            <div className={'saleContainer'}>\n                <div>\n                    <input style ={inputStyle} type=\"number\" name=\"bonusCharge\" onChange={this.handleChange}/> \n                    <button style={btStyle}onClick = { \n                        async () => {\n                        const result = await this.buttonBonusCharge();\n                         if (result.success){\n                             alert(`${this.state.bonusCharge} бонусов накопленно`);\n                             await this.buttonGetSales()\n                         } else {\n                            alert(`${this.state.bonusCharge} не верное число`);\n                         }\n                    }\n                    }>Начислить бонусы</button>\n                </div>\n                <div>\n                    <input style ={inputStyle} type=\"number\" name=\"bonusWriteOff\" onChange={this.handleChange}/> \n                    <button style={btStyle}onClick = { \n                        async () => {\n                        const result = await this.buttonBonusWriteOff();\n                        if (result.success){\n                            alert(`${this.state.bonusWriteOff} бонусов списанно`);\n                            await this.buttonGetSales()\n                        } else {\n                        alert(`${this.state.bonusWriteOff} не верное число`);\n                     }\n                    }\n                    }>Списать бонусы</button>\n                </div>\n                <div style={saleStyle}>\n                <h3>&nbsp; &nbsp;Чек <br></br></h3>\n                &nbsp; &nbsp;Сумма чека: \n                    <input style ={inputStyle}type=\"number\" name=\"amount\" onChange={this.handleChange}/> <br></br>\n                    &nbsp; &nbsp;Бонусов к списанию (если 0 копим):\n                    <input style ={inputStyle} type=\"number\" name=\"writeSaleBonus\" onChange={this.handleChange}/> <br></br>\n                    <button style={btStyle}onClick = { \n                        async () => {\n                        const result = await this.buttonSale();\n                        if (result.success){\n                            alert(`Операция проведена`);\n                            await this.buttonGetSales();\n                        } else {\n                            alert(`Ошибка: превышен лимит или не верное число`);\n                        }\n                    }\n                    }>Провести операцию</button>\n                </div>\n                <div style={saleStyle}>\n                <h3>&nbsp; &nbsp;Смена категрии </h3><br></br>\n                &nbsp; &nbsp;Текущая категория: {card.templateName}<br></br>\n                <select style ={inputStyle} value={this.state.templateChanged} name=\"templateChanged\" onChange={this.handleChange}>\n                        {\n                            this.createSelectItems()\n                        }\n                </select>\n                <button style={btStyle} onClick = { \n                        async () => {\n                        const result = await this.buttonTemplate();\n                        if (result.success){\n                            alert(`категория изменена`);\n                            await this.buttonGetSales();\n                        } else {\n                            alert('Ошибка смены категории');\n                        }\n                    }\n                    }>Сменить категорию</button>\n                </div>\n            </div>\n        )\n        }  if (card.discount !== 0 || (card.discount === 0 && card.cashback === 0)) \n         {\n            return(\n                <div className={'discountContainer'}>\n                    <div style={saleStyle}>\n                        <h3>&nbsp; &nbsp;Смена категрии <br></br></h3>\n                        &nbsp; &nbsp;Текущая категория: {card.templateName}<br></br>\n                         <select style ={inputStyle} value={this.state.templateChanged} name=\"templateChanged\" onChange={this.handleChange}>\n                        {\n                            this.createSelectItems()\n                        }\n                        </select>\n                        <button style={btStyle} onClick = { \n                        async () => {\n                            const result = await this.buttonTemplate();\n                            if (result.success){\n                                alert(`категория изменена`);\n                                await this.buttonGetSales();\n                            } else {\n                                alert('Ошибка смены категории');\n                            }\n                        }\n                        }>Сменить категорию</button>\n                    </div>\n                </div>\n            )\n        }\n\n    }\n    render() {\n        \n        return (\n            <div>\n                <div className={'loginContainer'}>\n                    {this.inputForm()}<br></br>\n                    <button style={btStyle}\n                    \n                    onClick = { \n                        async () => {\n                        await this.buttonGetSales();\n                    }\n                    }> Получить продажи</button>\n                    {this.cardInfoDraw()}\n                </div>\n                <div className={'dataContainer'}>\n                    {this.salesDraw()}\n                    \n                    {this.saleForm()}\n                    \n                </div>\n           \n           </div>\n           \n        );\n    }\n}  \n\n\nexport {InputCreds};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {InputCreds} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport logo from './4.png'\n\nconst logoStyle = { \n  width: 160, \n  \"margin-top\" : \"2%\",\n  \"margin-left\" : \"2%\",\n  \"border-radius\": \"15px 15px 15px 16px\",\n};\n\nReactDOM.render(\n\n  <React.StrictMode> \n    <a href=\"http://client.lo.cards\">\n      <img src={logo} alt={\"logo\"} style = {logoStyle}/>\n    </a>\n    <br></br><br></br>\n    <InputCreds/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}