{"ast":null,"code":"var timeConverter=function timeConverter(unixTime){var months=['01','02','03','04','05','06','07','08','09','10','11','12'];var date=new Date(unixTime*1000);return\"\".concat(date.getDate(),\"-\").concat(months[date.getMonth()],\"-\").concat(date.getFullYear());};var salesPars=function salesPars(array){return array.map(function(item){return{amount:item.amount,write:item.bonusesWriteOff,charge:item.bonusesCharge,date:timeConverter(item.createdAt)};});};var parsSales=function parsSales(data){if(!data[0])return data;data[1]=salesPars(data[1]);return data;};export{parsSales};","map":{"version":3,"sources":["/Users/maximpodorogin/Desktop/Sales/src/utils/Tools.js"],"names":["timeConverter","unixTime","months","date","Date","getDate","getMonth","getFullYear","salesPars","array","map","item","amount","write","bonusesWriteOff","charge","bonusesCharge","createdAt","parsSales","data"],"mappings":"AAAA,GAAMA,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,QAAQ,CAAI,CAChC,GAAMC,CAAAA,MAAM,CAAG,CAAC,IAAD,CAAO,IAAP,CAAa,IAAb,CACX,IADW,CACL,IADK,CACC,IADD,CAEX,IAFW,CAEL,IAFK,CAEC,IAFD,CAGX,IAHW,CAGL,IAHK,CAGC,IAHD,CAAf,CAKA,GAAMC,CAAAA,IAAI,CAAG,GAAIC,CAAAA,IAAJ,CAASH,QAAQ,CAAG,IAApB,CAAb,CACA,gBAAUE,IAAI,CAACE,OAAL,EAAV,aAA4BH,MAAM,CAACC,IAAI,CAACG,QAAL,EAAD,CAAlC,aAAuDH,IAAI,CAACI,WAAL,EAAvD,EACD,CARD,CASA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAAAC,KAAK,CAAI,CACzB,MAAOA,CAAAA,KAAK,CAACC,GAAN,CAAU,SAACC,IAAD,CAAU,CACvB,MAAO,CACHC,MAAM,CAAED,IAAI,CAACC,MADV,CAEHC,KAAK,CAAEF,IAAI,CAACG,eAFT,CAGHC,MAAM,CAAEJ,IAAI,CAACK,aAHV,CAIHb,IAAI,CAAEH,aAAa,CAACW,IAAI,CAACM,SAAN,CAJhB,CAAP,CAMH,CAPM,CAAP,CAQD,CATD,CAWA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,IAAD,CAAS,CACzB,GAAI,CAACA,IAAI,CAAC,CAAD,CAAT,CAAc,MAAOA,CAAAA,IAAP,CAChBA,IAAI,CAAC,CAAD,CAAJ,CAAUX,SAAS,CAACW,IAAI,CAAC,CAAD,CAAL,CAAnB,CACA,MAAOA,CAAAA,IAAP,CACC,CAJD,CAOA,OAAQD,SAAR","sourcesContent":["const timeConverter = unixTime => {\n  const months = ['01', '02', '03',\n      '04', '05', '06',\n      '07', '08', '09',\n      '10', '11', '12'\n  ];\n  const date = new Date(unixTime * 1000);\n  return `${date.getDate()}-${months[date.getMonth()]}-${date.getFullYear()}`;\n}\nconst salesPars = array => {\n  return array.map((item) => {\n      return {\n          amount: item.amount,\n          write: item.bonusesWriteOff,\n          charge: item.bonusesCharge,\n          date: timeConverter(item.createdAt)\n      }\n  });\n}\n\nconst parsSales = (data) =>{\n  if (!data[0]) return data;\ndata[1] = salesPars(data[1]);\nreturn data;\n}\n\n\nexport {parsSales};"]},"metadata":{},"sourceType":"module"}