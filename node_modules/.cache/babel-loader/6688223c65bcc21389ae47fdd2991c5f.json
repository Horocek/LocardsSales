{"ast":null,"code":"const fetchData = async (login, pass, card) => {\n  const autorized = await loginUser(login, pass);\n  if (!autorized) return \"Не верный логин/пароль\";\n  const crmToken = await getCrmToken(autorized);\n  const cardInfo = await getCard(crmToken, card);\n  if (!cardInfo) return \"карта не найдена\";\n  const sales = await getSales(cardInfo.id, autorized);\n  if (!sales) return \"нет продаж\"; // let bearer = 'Bearer ';\n  // const response = await fetch('https://api.lo.cards/v1/crm/card/100095', {\n  //     method: 'GET',\n  //     withCredentials: true,\n  //     headers: {\n  //         'Authorization': bearer,\n  //         'Content-Type': 'application/json'\n  //     }})\n\n  return sales;\n};\n\nconst loginUser = async (login, pass) => {\n  const user = {\n    email: login,\n    password: pass\n  };\n  const response = await fetch('https://api.lo.cards/v1/user/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json;charset=utf-8'\n    },\n    body: JSON.stringify(user)\n  });\n  const result = await response.json();\n  return !result.success ? result.success : result.data;\n};\n\nconst getCrmToken = async JWT => {\n  const response = await fetch('https://api.lo.cards/v1/integration', {\n    method: 'GET',\n    headers: {\n      'Authorization': `Bearer ${JWT}`,\n      'Content-Type': 'application/json;charset=utf-8'\n    }\n  });\n  const result = await response.json();\n  return result.data[0].token;\n};\n\nconst getCard = async (CRM, card) => {\n  const response = await fetch(`https://api.lo.cards/v1/crm/card/${card}`, {\n    method: 'GET',\n    headers: {\n      'Authorization': `Bearer ${CRM}`,\n      'Content-Type': 'application/json;charset=utf-8'\n    }\n  });\n  const result = await response.json();\n  return !result.success ? result.success : result.data;\n};\n\nconst getSales = async (cardId, JWT) => {\n  const response = await fetch(`https://api.lo.cards/v1/analytics/sale-for-card/${cardId}`, {\n    method: 'GET',\n    headers: {\n      'Authorization': `Bearer ${JWT}`,\n      'Content-Type': 'application/json;charset=utf-8'\n    }\n  });\n  const result = await response.json();\n  return result.data.length === 0 ? false : result.data;\n};\n\nexport { fetchData };","map":{"version":3,"sources":["/Users/maximpodorogin/Desktop/Sales/src/utils/Api.js"],"names":["fetchData","login","pass","card","autorized","loginUser","crmToken","getCrmToken","cardInfo","getCard","sales","getSales","id","user","email","password","response","fetch","method","headers","body","JSON","stringify","result","json","success","data","JWT","token","CRM","cardId","length"],"mappings":"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","sourcesContent":["const fetchData = async (login, pass, card) => {\n    const autorized =  await loginUser(login, pass);\n    if (!autorized) return \"Не верный логин/пароль\";\n    const crmToken = await getCrmToken(autorized)\n    const cardInfo = await getCard(crmToken, card)\n    if (!cardInfo) return \"карта не найдена\";\n    const sales = await getSales(cardInfo.id, autorized);\n    if (!sales) return \"нет продаж\";\n    // let bearer = 'Bearer ';\n    // const response = await fetch('https://api.lo.cards/v1/crm/card/100095', {\n    //     method: 'GET',\n    //     withCredentials: true,\n    //     headers: {\n    //         'Authorization': bearer,\n    //         'Content-Type': 'application/json'\n    //     }})\n    return sales;\n\n};\n\nconst loginUser = async (login, pass) => {\n    const user = {\n        email: login,\n        password: pass\n    };\n    const response = await fetch('https://api.lo.cards/v1/user/login', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify(user)\n      });\n      const result =  await response.json();\n      return !result.success ? result.success : result.data;\n}\n\n\nconst getCrmToken = async (JWT) => {\n\n    const response = await fetch('https://api.lo.cards/v1/integration', {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${JWT}`,\n            'Content-Type': 'application/json;charset=utf-8'\n        }\n      });\n      const result =  await response.json();\n      return result.data[0].token;\n}\n\nconst getCard = async (CRM, card) => {\n\n    const response = await fetch(`https://api.lo.cards/v1/crm/card/${card}`, {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${CRM}`,\n            'Content-Type': 'application/json;charset=utf-8'\n        }\n      });\n      const result =  await response.json();\n      return !result.success ? result.success : result.data;\n}\n\nconst getSales = async (cardId, JWT) => {\n\n    const response = await fetch(`https://api.lo.cards/v1/analytics/sale-for-card/${cardId}`, {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${JWT}`,\n            'Content-Type': 'application/json;charset=utf-8'\n        }\n      });\n      const result =  await response.json();\n      return result.data.length === 0 ? false : result.data;\n}\nexport {\n    fetchData\n};"]},"metadata":{},"sourceType":"module"}